# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Validate that all values passed are valid IPv4 or IPV6 address,
#    or hostnames.
#    Fail compilation if any value fails this check.
#
#
#
Puppet::Functions.create_function(:'validate_host') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    


  unless args.length > 0 then
   raise Puppet::ParseError, ("validate_host(): wrong number of arguments (#{args.length}; must be > 0)")
  end

  args.each do |arg|
    unless arg.is_a?(String)
      raise Puppet::ParseError, "#{arg.inspect} is not a string."
    end

    Puppet::Parser::Functions.autoloader.load(:is_ip_address) \
      unless Puppet::Parser::Functions.autoloader.loaded?(:is_ip_address)

    unless ( is_ip_address($arg) or /^[a-zA-Z0-9][a-zA-Z0-9-]*(\.[a-zA-Z0-9]+)*$/.match($arg) ) then 
      raise Puppet::ParseError, "#{arg.inspect} does not seem to be valid ip address nor hostname."
    end

  end


  end
end
