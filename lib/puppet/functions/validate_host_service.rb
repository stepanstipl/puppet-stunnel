# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Validate that first argument passed is valid combination of host (ip) and port (service)
#    or array of these.
#    2nd option arguments signifies whether the port part is required (defaults to true)
#    Fail compilation if any value fails this check.
#
#
#
Puppet::Functions.create_function(:'validate_host_service') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if (args.length < 1) or (args.length > 2) then
      raise Puppet::ParseError, ("validate_host_service(): wrong number of arguments (#{args.length}; must be 1 or 2)")
    end

    if ([args[0]].flatten.empty) then
      raise Puppet::ParseError, ("validate_host_service(): first argument must be either sting or non-empty array)")
    end

    unless (args[1] == true || args[1] == false) then
      raise Puppet::ParseError, ("#{arg[1].inspect} is not a boolean.  It looks to be a #{arg[1].class}")
    end

    require_port = args[1] || true
    
    args[0].each do  |arg|

      if match /^(.*):(.*)$/.match(arg) then
        host = match[1]
        service = match[2]
      else
        if require_port then
          raise Puppet::ParseError, ("#{arg.inspect} doesn't seem to be in form host:service.")
        end
        host = arg
      end

      Puppet::Parser::Functions.autoloader.load(:validate_host) \
        unless Puppet::Parser::Functions.autoloader.loaded?(:validate_host) 

      Puppet::Parser::Functions.autoloader.load(:validate_service) \
        unless Puppet::Parser::Functions.autoloader.loaded?(:validate_service) 

      validate_host(host)
      if service then
        validate_service(service)
      end
    end

  
  end
end
